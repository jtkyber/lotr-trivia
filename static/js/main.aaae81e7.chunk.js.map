{"version":3,"sources":["Option.js","Options.js","App.js","reportWebVitals.js","index.js"],"names":["Option","char","id","classname","handleSelection","className","htmlFor","type","name","value","onChange","getRandomCharacter","characters","Math","floor","random","length","Options","character","randomCharacters","index","answerPosition","i","slice","includes","map","App","props","updateStoredData","allCharacters","JSON","parse","localStorage","getItem","allQuotes","allQuotesChars","updateQuote","setState","cardStatus","randQuote","forEach","c","_id","currentQuote","currentCharacter","getAllCharsFromQuotes","allCharsFromQuotes","q","push","setItem","stringify","e","optionSelected","currentSelection","target","selectedOption","handleSubmit","state","correctAnswers","resultText","correctAnswer","numberOfQuestions","checked","buttonContent","urls","a","this","fetchQuotes","fetchAllCharacters","fetch","headers","Authorization","resp","json","quotes","docs","animationIn","animationOut","isVisible","dialog","style","color","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaae81e7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Option = ({ char, id, classname, handleSelection }) => {\r\n    return (\r\n        <div className={'individualOptions ' + classname}>\r\n            <label htmlFor={id}>{char}</label>\r\n            <input type=\"radio\" id={id} name='option' value={char} onChange={handleSelection}/><br />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Option;\r\n","import React from 'react';\r\nimport Option from './Option';\r\n\r\nconst getRandomCharacter = (characters) => {\r\n    return Math.floor(Math.random() * (characters.length-0) + 0);\r\n}\r\n\r\nconst Options = ({character, characters, handleSelection}) => {\r\n    let randomCharacters = [];\r\n    let index = 0;\r\n    let answerPosition = Math.floor(Math.random() * (3-0) + 0);\r\n    for (let i = 0; i < 4; i++) {\r\n        if (characters !== null) {\r\n            randomCharacters[i] = characters[getRandomCharacter(characters)];\r\n\r\n            if (randomCharacters.slice(0,(randomCharacters.length - 1)).includes(randomCharacters[i]) || randomCharacters[i] === character) {\r\n                i-=1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        randomCharacters.map(char => {\r\n            index+=1;\r\n            if (answerPosition === (index - 1)) {\r\n                return <Option char={character} id={'option' + index} key={character} classname='answer' handleSelection={handleSelection} />\r\n            } else {\r\n                return <Option char={char} id={'option' + index} key={char} classname='' handleSelection={handleSelection} />\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\nexport default Options;\r\n","import React, { Component } from 'react';\nimport {Animated} from \"react-animated-css\";\nimport Options from './Options';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: [],\n      currentCharacter: [],\n      cardStatus: 'hide'\n    }\n\n    this.urls = [\n      'https://the-one-api.dev/v2/quote/',\n      'https://the-one-api.dev/v2/character/'\n    ]\n\n    this.allCharacters = JSON.parse(localStorage.getItem('allCharacters'));;\n    this.allQuotes = JSON.parse(localStorage.getItem('allQuotes'));\n    this.allQuotesChars = JSON.parse(localStorage.getItem('allQuotesChars'));\n    this.correctAnswers = 0;\n    this.numberOfQuestions = 0;\n    this.currentSelection = '';\n    this.optionSelected = false;\n    this.correctAnswer = false;\n    this.resultText = '';\n    this.selectedOption = '';\n  }\n\n  async componentDidMount() {\n    await this.fetchQuotes();\n    await this.fetchAllCharacters();\n  }\n\n  updateStoredData = () => {\n    this.allCharacters = JSON.parse(localStorage.getItem('allCharacters'));\n    this.allQuotes = JSON.parse(localStorage.getItem('allQuotes'));\n    this.allQuotesChars = JSON.parse(localStorage.getItem('allQuotesChars'));\n  }\n\n  async fetchQuotes() {\n    const resp = await fetch(this.urls[0], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const quotes = await resp.json()\n    localStorage.setItem('allQuotes', JSON.stringify(quotes.docs));\n    this.updateStoredData();\n  }\n\n  async fetchAllCharacters() {\n    const resp = await fetch(this.urls[1], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const characters = await resp.json();\n    localStorage.setItem('allCharacters', JSON.stringify(characters.docs));\n    this.updateStoredData();\n    this.getAllCharsFromQuotes();\n  }\n\n  updateQuote = () => {\n    this.setState({ cardStatus: 'makeOptionsTransparent' });\n    const randQuote = this.allQuotes[Math.floor(Math.random() * (this.allQuotes.length-0) + 0)];\n    this.allCharacters.forEach(c => {\n      if (c._id === randQuote.character) {\n        this.setState({\n          currentQuote: randQuote,\n          currentCharacter: c,\n          cardStatus: 'show'\n        });\n        return;\n      }\n    })\n  }\n\n  getAllCharsFromQuotes = () => {\n    const allCharsFromQuotes = [];\n    this.allQuotes.forEach(q => {\n      this.allCharacters.forEach(c => {\n        if (!allCharsFromQuotes.includes(c.name) && (q.character === c._id)) {\n          allCharsFromQuotes.push(c.name);\n        }\n      })\n    })\n    localStorage.setItem('allQuotesChars', JSON.stringify(allCharsFromQuotes));\n    this.updateStoredData();\n  }\n\n  handleSelection = (e) => {\n    this.optionSelected = true;\n    this.currentSelection = e.target.value;\n    this.selectedOption = e.target;\n  }\n\n  handleSubmit = () => {\n    if (this.optionSelected || this.state.cardStatus === 'hide') {\n      if (this.currentSelection === this.state.currentCharacter.name) {\n        this.correctAnswers += 1;\n        this.resultText = 'Correct!'\n        this.correctAnswer = true;\n        this.numberOfQuestions += 1;\n        this.selectedOption.checked = false;\n      } else if (this.state.cardStatus === 'show') {\n        this.resultText = 'Correct Answer: ' + this.state.currentCharacter.name;\n        this.correctAnswer = false;\n        this.numberOfQuestions += 1;\n        this.selectedOption.checked = false;\n      }\n      this.updateQuote();\n      this.optionSelected = false;\n    }\n  }\n\n  buttonContent = () => {\n    if (this.state.cardStatus === 'show') {\n      return 'Submit'\n    } else {return 'Start'}\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div></div>\n        <Animated animationIn=\"\" animationOut=\"\" isVisible={true}>\n          <div className='quote'><h4 className='quoteText'>{this.state.currentQuote.dialog}</h4></div>\n        </Animated>\n        <div className='score'><h3>{'Score: ' + this.correctAnswers + '/' + this.numberOfQuestions}</h3></div>\n        <div className='options'>\n          <h4 className='resultText' style = {{color: this.correctAnswer === true ? 'green' : 'red'}}>{this.resultText}</h4>\n          <form className='allOptions'>\n            <Options character={this.state.cardStatus === 'show' ? this.state.currentCharacter.name : null} characters={this.state.cardStatus === 'show' ? this.allQuotesChars : null} handleSelection={this.handleSelection} />\n            <button onClick={this.handleSubmit} type='button'>{this.buttonContent()}</button>\n          </form>\n        </div>\n        <div></div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}