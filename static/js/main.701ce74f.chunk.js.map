{"version":3,"sources":["Option.js","Options.js","App.js","reportWebVitals.js","index.js"],"names":["Option","char","id","classname","className","htmlFor","type","name","value","Options","character","characters","randomCharacters","index","answerPosition","Math","floor","random","i","length","slice","includes","console","log","map","App","props","getAllCharsFromQuotes","allQuotes","forEach","q","allCharacters","c","allQuotesChars","_id","push","setState","updateQuote","currentQuote","fetchCharacter","updateCharacter","currentCharacter","fetchAllCharacters","state","urls","this","fetchQuotes","a","fetch","headers","Authorization","resp","json","quotes","docs","curChar","animationIn","animationOut","isVisible","cardAnimationClass","dialog","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.701ce74f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Option = ({ char, id, classname }) => {\r\n    return (\r\n        <div className={'individualOptions ' + classname}>\r\n            <label htmlFor={id}>{char}</label>\r\n            <input type=\"radio\" id={id} name='option' value={char}/><br />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Option;\r\n","import React from 'react';\r\nimport Option from './Option';\r\n\r\nconst getRandomCharacter = (characters) => {\r\n    return Math.floor(Math.random() * (5-0) + 0);\r\n}\r\n\r\nconst Options = ({character, characters}) => {\r\n    let randomCharacters = [];\r\n    let index = 0;\r\n    let answerPosition = Math.floor(Math.random() * (3-0) + 0);\r\n    for (let i = 0; i < 4; i++) {\r\n        if (characters.length !== 0) {\r\n            randomCharacters[i] = characters[getRandomCharacter(characters)];\r\n\r\n            if (randomCharacters.slice(0,(randomCharacters.length - 1)).includes(randomCharacters[i]) || randomCharacters[i] === character) {\r\n                i-=1;\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(characters);\r\n\r\n    return (\r\n        randomCharacters.map(char => {\r\n            index+=1;\r\n            if (answerPosition === (index - 1)) {\r\n                return <Option char={character} id={'option' + index} key={character} classname='answer'/>\r\n            } else {\r\n                return <Option char={char} id={'option' + index} key={char} classname=''/>\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\nexport default Options;\r\n","import React, { Component } from 'react';\nimport {Animated} from \"react-animated-css\";\nimport Options from './Options';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: [],\n      currentCharacter: []\n    }\n\n    this.urls = [\n      'https://the-one-api.dev/v2/quote/',\n      'https://the-one-api.dev/v2/character/'\n    ]\n\n    this.allCharacters = [];\n    this.allQuotes = [];\n    this.allQuotesChars = [];\n  }\n\n  componentDidMount() {\n    this.fetchQuotes();\n  }\n\n  async fetchQuotes() {\n    const resp = await fetch(this.urls[0], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const quotes = await resp.json()\n    this.allQuotes = quotes.docs;\n    this.updateQuote(quotes.docs);\n  }\n\n  getAllCharsFromQuotes = () => {\n    this.allQuotes.forEach(q => {\n      this.allCharacters.forEach(c => {\n        if (!this.allQuotesChars.includes(c.name) && (q.character === c._id)) {\n          this.allQuotesChars.push(c.name);\n        }\n      })\n    })\n    this.setState({});\n  }\n\n  async fetchAllCharacters() {\n    const resp = await fetch(this.urls[1], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const characters = await resp.json();\n    this.allCharacters = characters.docs;\n    this.getAllCharsFromQuotes();\n  }\n\n  async fetchCharacter() {\n    const curChar = this.urls[1] + this.state.currentQuote.character;\n    const resp = await fetch(curChar, {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const character = await resp.json();\n    this.updateCharacter(character.docs);\n  }\n\n  updateQuote = (q) => {\n    this.setState({\n      currentQuote: q[Math.floor(Math.random() * (q.length-0) + 0)]\n    });\n    this.fetchCharacter();\n  }\n\n  updateCharacter = (c) => {\n    this.setState({\n      currentCharacter: c[0]\n    });\n    this.fetchAllCharacters();\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Animated animationIn=\"\" animationOut=\"\" isVisible={true}>\n          <div className={'quote animate__animated animate__infinite ' + this.state.cardAnimationClass}>{this.state.currentQuote.dialog}</div>\n        </Animated>\n        <div className='options'>\n          <form className='allOptions'>\n            <Options character={this.state.currentCharacter.name} characters={this.allQuotesChars} />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}