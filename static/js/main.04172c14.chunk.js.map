{"version":3,"sources":["Option.js","Options.js","App.js","reportWebVitals.js","index.js"],"names":["Option","char","id","classname","className","htmlFor","type","name","value","getRandomCharacter","characters","Math","floor","random","length","Options","character","randomCharacters","index","answerPosition","i","slice","includes","map","App","props","updateStoredData","allCharacters","JSON","parse","localStorage","getItem","allQuotes","allQuotesChars","updateQuote","setState","cardStatus","randQuote","forEach","c","_id","currentQuote","currentCharacter","getAllCharsFromQuotes","allCharsFromQuotes","q","push","setItem","stringify","state","urls","a","this","fetchQuotes","fetchAllCharacters","fetch","headers","Authorization","resp","json","quotes","docs","animationIn","animationOut","isVisible","dialog","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04172c14.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Option = ({ char, id, classname }) => {\r\n    return (\r\n        <div className={'individualOptions ' + classname}>\r\n            <label htmlFor={id}>{char}</label>\r\n            <input type=\"radio\" id={id} name='option' value={char}/><br />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Option;\r\n","import React from 'react';\r\nimport Option from './Option';\r\n\r\nconst getRandomCharacter = (characters) => {\r\n    return Math.floor(Math.random() * (characters.length-0) + 0);\r\n}\r\n\r\nconst Options = ({character, characters}) => {\r\n    let randomCharacters = [];\r\n    let index = 0;\r\n    let answerPosition = Math.floor(Math.random() * (3-0) + 0);\r\n    for (let i = 0; i < 4; i++) {\r\n        if (characters !== null) {\r\n            randomCharacters[i] = characters[getRandomCharacter(characters)];\r\n\r\n            if (randomCharacters.slice(0,(randomCharacters.length - 1)).includes(randomCharacters[i]) || randomCharacters[i] === character) {\r\n                i-=1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        randomCharacters.map(char => {\r\n            index+=1;\r\n            if (answerPosition === (index - 1)) {\r\n                return <Option char={character} id={'option' + index} key={character} classname='answer'/>\r\n            } else {\r\n                return <Option char={char} id={'option' + index} key={char} classname=''/>\r\n            }\r\n        })\r\n    )\r\n}\r\n\r\nexport default Options;\r\n","import React, { Component } from 'react';\nimport {Animated} from \"react-animated-css\";\nimport Options from './Options';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: [],\n      currentCharacter: [],\n      cardStatus: 'makeOptionsTransparent'\n    }\n\n    this.urls = [\n      'https://the-one-api.dev/v2/quote/',\n      'https://the-one-api.dev/v2/character/'\n    ]\n\n    this.allCharacters = JSON.parse(localStorage.getItem('allCharacters'));;\n    this.allQuotes = JSON.parse(localStorage.getItem('allQuotes'));\n    this.allQuotesChars = JSON.parse(localStorage.getItem('allQuotesChars'));\n    // this.dataFetched = localStorage.getItem('dataFetched');\n  }\n\n  async componentDidMount() {\n    await this.fetchQuotes();\n    await this.fetchAllCharacters();\n    // await this.updateQuote();\n    // this.dataFetched = localStorage.setItem('dataFetched', 'true');\n  }\n\n  updateStoredData = () => {\n    this.allCharacters = JSON.parse(localStorage.getItem('allCharacters'));\n    this.allQuotes = JSON.parse(localStorage.getItem('allQuotes'));\n    this.allQuotesChars = JSON.parse(localStorage.getItem('allQuotesChars'));\n  }\n\n  async fetchQuotes() {\n    const resp = await fetch(this.urls[0], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const quotes = await resp.json()\n    localStorage.setItem('allQuotes', JSON.stringify(quotes.docs));\n    this.updateStoredData();\n  }\n\n  async fetchAllCharacters() {\n    const resp = await fetch(this.urls[1], {\n      headers: {\n        Authorization: \"Bearer Ye6ZHvvDJkrLbHVjNtK4\"\n      }\n    });\n    const characters = await resp.json();\n    localStorage.setItem('allCharacters', JSON.stringify(characters.docs));\n    this.updateStoredData();\n    this.getAllCharsFromQuotes();\n  }\n\n  updateQuote = () => {\n    this.setState({ cardStatus: 'makeOptionsTransparent' });\n    const randQuote = this.allQuotes[Math.floor(Math.random() * (this.allQuotes.length-0) + 0)];\n    this.allCharacters.forEach(c => {\n      if (c._id === randQuote.character) {\n        this.setState({\n          currentQuote: randQuote,\n          currentCharacter: c,\n          cardStatus: 'options'\n        });\n        return;\n      }\n    })\n  }\n\n  getAllCharsFromQuotes = () => {\n    const allCharsFromQuotes = [];\n    this.allQuotes.forEach(q => {\n      this.allCharacters.forEach(c => {\n        if (!allCharsFromQuotes.includes(c.name) && (q.character === c._id)) {\n          allCharsFromQuotes.push(c.name);\n        }\n      })\n    })\n    localStorage.setItem('allQuotesChars', JSON.stringify(allCharsFromQuotes));\n    this.updateStoredData();\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Animated animationIn=\"\" animationOut=\"\" isVisible={true}>\n          <div className='quote'>{this.state.currentQuote.dialog}</div>\n        </Animated>\n        <div className={this.state.cardStatus}>\n          <form className='allOptions'>\n            <Options character={this.state.currentCharacter.name} characters={this.allQuotesChars} />\n            <button onClick={this.updateQuote} type='button'>New Quote</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}